function update(){
    rm ~/.Brewfile
    brew bundle dump --global
    dotfiles add ~/.Brewfile
    dotfiles commit -m "Update dotfiles and installs" -a
    dotfiles push
}

function create(){

    # arr="$@"
    # msg="Added "

    # echo $arr

    # for (( i=1; i < ${#arr[@]} ; i++ )); do
        # dotfiles add $arr[$i]
        # msg+=arr[$i]
        # echo $arr[$i]
    # done

    # if [[ msg != "Added " ]];
    # then
    #     dotfiles commit -m $msg
    #     dotfiles push
    # fi

    dotfiles add $1
    dotfiles commit -m "Added $1"
    dotfiles push
}

function install(){
    brew bundle install --global
}

function help(){
    echo "
Usage: dotfiles [command]
    [ u | update | -u | --update ]
    [ i | install | -i | --install ]
    [ c | create | -c | --create ] [ filename ]
    [ h | help | -h | --help ]

    update:     push changes to brew installs or watched files to git
    install:    install from brew config file
    create:     add new dotfile and push
    help:       display manual

Any other arguments fall through to git, i.e. dotfiles status

Use 'git --help' to access general git help.
    "
}

if [[ $argv = "add ." ]]; then
    echo "Nope, you don't want to add all files."
else

    case "$1" in
        u | update | -u | --update )
            update
            ;;
        i | install | -i | --install )
            install
            ;;
        c | create | -c | --create )
            if [[ $# < 2 ]];
            then
                echo "Please specify an argument i.e. \ndotfiles -c .filename"
            else
                create $2
                # create $@
            fi;
            ;;
        h | help | -h | --help )
            help
            ;;
        * )
            /usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME $argv
            ;;
    esac

fi


# die() { echo "$*" >&2; exit 2; }  # complain to STDERR and exit with error
# needs_arg() { if [ -z "$OPTARG" ]; then die "No arg for --$OPT option"; fi; }

# while getopts h:ab:c:-: OPT; do
#   # support long options: https://stackoverflow.com/a/28466267/519360
#   if [ "$OPT" = "-" ]; then   # long option: reformulate OPT and OPTARG
#     OPT="${OPTARG%%=*}"       # extract long option name
#     OPTARG="${OPTARG#$OPT}"   # extract long option argument (may be empty)
#     OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
#   fi
#   case "$OPT" in
#     a | alpha )    alpha=true ;;
#     # b | bravo )    needs_arg; bravo="$OPTARG" ;;
#     c | charlie )  needs_arg; charlie="$OPTARG" ;;
#     h | help )     echo "helppppp";;
#     ??* )          die "Illegal option --$OPT" ;;  # bad long option
#     ? )            exit 2 ;;  # bad short option (error reported via getopts)
#   esac
# done
# shift $((OPTIND-1)) # remove parsed options and args from $@ list